openapi: 3.0.3
info:
  title: School Management System
  description: >-
    # ðŸš€ Get started here


    This template guides you through CRUD operations (GET, POST, PUT, DELETE),
    variables, and tests.


    ## ðŸ”– **How to use this template**


    #### **Step 1: Send requests**


    RESTful APIs allow you to perform CRUD operations using the POST, GET, PUT,
    and DELETE HTTP methods.


    This collection contains each of these
    [request](https://learning.postman.com/docs/sending-requests/requests/)
    types. Open each request and click "Send" to see what happens.


    #### **Step 2: View responses**


    Observe the response tab for status code (200 OK), response time, and size.


    #### **Step 3: Send new Body data**


    Update or add new data in "Body" in the POST request. Typically, Body data
    is also used in PUT request.


    ```

    {
        "name": "Add your name in the body"
    }

     ```

    #### **Step 4: Update the variable**


    Variables enable you to store and reuse values in Postman. We have created a
    [variable](https://learning.postman.com/docs/sending-requests/variables/)
    called `base_url` with the sample request
    [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me).
    Replace it with your API endpoint to customize this collection.


    #### **Step 5: Add tests in the "Tests" tab**


    Tests help you confirm that your API is working as expected. You can write
    test scripts in JavaScript and view the output in the "Test Results" tab.


    <img
    src="https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n">


    ## ðŸ’ª Pro tips


    - Use folders to group related requests and organize the collection.

    - Add more
    [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)
    in "Tests" to verify if the API works as expected and execute workflows.
        

    ## ðŸ’¡Related templates

  version: 1.0.0
  contact: {
        name: "Joseph FOX",
        email: "josephfox@swissmail.com",
        url: "https://www.linkedin.com/in/josephfox-ch/",
    
      }
servers:
  - url: https://school-management-system-rest-api.vercel.app/

paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Login
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@admin.com
                password:
                  type: string
                  example: admin
            example:
              email: admin@admin.com
              password: admin
      responses:
        '200':
          description: ''
  /api/user:
    get:
      tags:
        - User
      summary: Get All Users
      description: Get All Users
      operationId: getAllUsers
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
    post:
      tags:
        - User
      summary: Create User
      description: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                classId:
                  type: number
                  example: 1
                email:
                  type: string
                  example: yunus.yildiz@hicoders.ch
                name:
                  type: string
                  example: Yunus YILDIZ
                password:
                  type: string
                  example: admin
                role:
                  type: string
                  example: student
            example:
              classId: 1
              email: yunus.yildiz@hicoders.ch
              name: Yunus YILDIZ
              password: admin
              role: student
      responses:
        '200':
          description: ''
  /api/user/5:
    get:
      tags:
        - User
      summary: Get User by ID
      description: Get User by ID
      operationId: getUserById
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
    put:
      tags:
        - User
      summary: Update User
      description: Update User
      operationId: updateUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                address:
                  type: string
                  example: Bern,1217
                classId:
                  type: number
                  example: 1
                email:
                  type: string
                  example: yunusyildiz@swissmail.com
                expertise:
                  type: string
                  example: JavaScript Expert
                name:
                  type: string
                  example: Joseph FOX
                password:
                  type: string
                  example: admin
                phone:
                  type: string
                  example: '+410799403561'
                role:
                  type: string
                  example: teacher
            example:
              address: Bern,1217
              classId: 1
              email: yunusyildiz@swissmail.com
              expertise: JavaScript Expert
              name: Joseph FOX
              password: admin
              phone: '+410799403561'
              role: teacher
      responses:
        '200':
          description: ''
  /api/user/15:
    delete:
      tags:
        - User
      summary: Delete User
      description: Delete User
      operationId: deleteUser
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class:
    get:
      tags:
        - Class
      summary: Get All Classes
      description: Get All Classes
      operationId: getAllClasses
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
    post:
      tags:
        - Class
      summary: Create new Class
      description: Create new Class
      operationId: createNewClass
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: Web-1
                counselor:
                  type: string
                  example: J.Fox
                name:
                  type: string
                  example: Web Engineering
            example:
              code: Web-1
              counselor: J.Fox
              name: Web Engineering
      responses:
        '200':
          description: ''
  /api/class/3:
    get:
      tags:
        - Class
      summary: Get Class By Id
      description: Get Class By Id
      operationId: getClassById
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
    delete:
      tags:
        - Class
      summary: Delete Class
      description: Delete Class
      operationId: deleteClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/1/teacher:
    get:
      tags:
        - Class
      summary: Get Teachers of Class
      description: Get Teachers of Class
      operationId: getTeachersOfClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/1/student:
    get:
      tags:
        - Class
      summary: Get Students of Class
      description: Get Students of Class
      operationId: getStudentsOfClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/1/assignment/5:
    post:
      tags:
        - Class
      summary: Set Assignments to a Class
      description: Set Assignments to a Class
      operationId: setAssignmentsToAClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/1/assignment:
    get:
      tags:
        - Class
      summary: Get Assignments of a Class
      description: Get Assignments of a Class
      operationId: getAssignmentsOfAClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/1/teacher/1:
    post:
      tags:
        - Class
      summary: Add Teacher To Class
      description: Add Teacher To Class
      operationId: addTeacherToClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/2/student/2:
    post:
      tags:
        - Class
      summary: Add Student To Class
      description: Add Student To Class
      operationId: addStudentToClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
    delete:
      tags:
        - Class
      summary: Remove Student from Class
      description: Remove Student from Class
      operationId: removeStudentFromClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/1/teacher/2:
    delete:
      tags:
        - Class
      summary: Remove Teacher from Class
      description: Remove Teacher from Class
      operationId: removeTeacherFromClass
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class/2:
    put:
      tags:
        - Class
      summary: Update Class
      description: Update Class
      operationId: updateClass
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  example: SW101
                counselor:
                  type: string
                  example: Joseph Fox
                name:
                  type: string
                  example: Software Engineering
            example:
              code: SW101
              counselor: Joseph Fox
              name: Software Engineering
      responses:
        '200':
          description: ''
  /api/teacher:
    get:
      tags:
        - Teacher
      summary: Get All Teachers
      description: Get All Teachers
      operationId: getAllTeachers
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/teacher/1/class-schedule:
    get:
      tags:
        - Teacher
      summary: Get Class Schedule of a Teacher
      description: Get Class Schedule of a Teacher
      operationId: getClassScheduleOfATeacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: teacher@email.com
                name:
                  type: string
                  example: new Teacher
                password:
                  type: string
                  example: admin
            example:
              email: teacher@email.com
              name: new Teacher
              password: admin
      responses:
        '200':
          description: ''
  /api/teacher/1/class-schedule/2:
    delete:
      tags:
        - Teacher
      summary: Delete Class Schedule of a Teacher
      description: Delete Class Schedule of a Teacher
      operationId: deleteClassScheduleOfATeacher
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/teacher/1:
    get:
      tags:
        - Teacher
      summary: Get Classes of a Teacher
      description: Get Classes of a Teacher
      operationId: getClassesOfATeacher
      responses:
        '200':
          description: ''
    put:
      tags:
        - Teacher
      summary: Update Teacher
      description: Update Teacher
      operationId: updateTeacher
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ''
                expertise:
                  type: string
                  example: ''
                name:
                  type: string
                  example: ''
                password:
                  type: string
                  example: admin
                role:
                  type: string
                  example: teacher
            example:
              email: ''
              expertise: ''
              name: ''
              password: admin
              role: teacher
      responses:
        '200':
          description: ''
    delete:
      tags:
        - Teacher
      summary: Delete Teacher
      description: Delete Teacher
      operationId: deleteTeacher
      responses:
        '200':
          description: ''
  /api/teacher/1/student:
    get:
      tags:
        - Teacher
      summary: Get Students of Teacher
      description: Get Students of Teacher
      operationId: getStudentsOfTeacher
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/student:
    get:
      tags:
        - Student
      summary: Get All Students
      description: Get All Students
      operationId: getAllStudents
      responses:
        '200':
          description: ''
  /api/grade/student/1/assignment/5:
    post:
      tags:
        - Student
      summary: Grade Student for Assignment
      description: Grade Student for Assignment
      operationId: gradeStudentForAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: number
                  example: 100
            example:
              grade: 100
      responses:
        '200':
          description: ''
  /api/grade/student/1/assignment/1:
    get:
      tags:
        - Student
      summary: Get Grade of a Student for a Assignment
      description: Get Grade of a Student for a Assignment
      operationId: getGradeOfAStudentForAAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: number
                  example: 90
            example:
              grade: 90
      responses:
        '200':
          description: ''
    put:
      tags:
        - Student
      summary: Update Grade of Student Assignment
      description: Update Grade of Student Assignment
      operationId: updateGradeOfStudentAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: number
                  example: 99
            example:
              grade: 99
      responses:
        '200':
          description: ''
  /api/grade/student/1:
    get:
      tags:
        - Student
      summary: Get All Grades of a Student
      description: Get All Grades of a Student
      operationId: getAllGradesOfAStudent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                grade:
                  type: number
                  example: 90
            example:
              grade: 90
      responses:
        '200':
          description: ''
  /api/student/1/class-schedule:
    get:
      tags:
        - Student
      summary: Get Class Schedule of a Student
      description: Get Class Schedule of a Student
      operationId: getClassScheduleOfAStudent
      responses:
        '200':
          description: ''
  /api/student/1:
    get:
      tags:
        - Student
      summary: Get Classes of a Student
      description: Get Classes of a Student
      operationId: getClassesOfAStudent
      responses:
        '200':
          description: ''
    put:
      tags:
        - Student
      summary: Update Student
      description: Update Student
      operationId: updateStudent
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ''
                name:
                  type: string
                  example: ''
                password:
                  type: string
                  example: admin
                role:
                  type: string
                  example: student
            example:
              email: ''
              name: ''
              password: admin
              role: student
      responses:
        '200':
          description: ''
    delete:
      tags:
        - Student
      summary: Delete Student
      description: Delete Student
      operationId: deleteStudent
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/student/1/teacher:
    get:
      tags:
        - Student
      summary: Get Teachers of a Student
      description: Get Teachers of a Student
      operationId: getTeachersOfAStudent
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/grade/student/1/assignment/3:
    delete:
      tags:
        - Student
      summary: Delete Grade of Student Assignment
      description: Delete Grade of Student Assignment
      operationId: deleteGradeOfStudentAssignment
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/assignment:
    get:
      tags:
        - Assignment
      summary: Get All Assignments
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      operationId: getAllAssignments
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
    post:
      tags:
        - Assignment
      summary: Create New Assignment
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      operationId: createNewAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dueDate:
                  type: string
                  example: '2024-02-03T10:59:00'
                title:
                  type: string
                  example: School Management System
            example:
              dueDate: '2024-02-03T10:59:00'
              title: School Management System
      responses:
        '200':
          description: ''
  /api/assignment/1:
    get:
      tags:
        - Assignment
      summary: Get Assignment by ID
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      operationId: getAssignmentById
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: admin@admin.com
                password:
                  type: string
                  example: admin
            example:
              email: admin@admin.com
              password: admin
      responses:
        '200':
          description: ''
    put:
      tags:
        - Assignment
      summary: Update Assignment
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      operationId: updateAssignment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dueDate:
                  type: string
                  example: '2024-02-03T10:59:00'
                title:
                  type: string
                  example: School Management System
            example:
              dueDate: '2024-02-03T10:59:00'
              title: School Management System
      responses:
        '200':
          description: ''
  /api/assignment/4:
    delete:
      tags:
        - Assignment
      summary: Delete Assignment
      description: >-
        This is a GET request and it is used to "get" data from an endpoint.
        There is no request body for a GET request, but you can use query
        parameters to help specify the resource you want data on (e.g., in this
        request, we have `id=1`).


        A successful GET response will have a `200 OK` status, and should
        include some kind of response body - for example, HTML web content or
        JSON data.
      operationId: deleteAssignment
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/class-schedule:
    post:
      tags:
        - Class Schedule
      summary: Create Class Schedule
      description: Create Class Schedule
      operationId: createClassSchedule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                daysOfWeek:
                  type: string
                  example: 1,3,5
                endDate:
                  type: string
                  example: '2024-02-31'
                startDate:
                  type: string
                  example: '2024-02-19'
                title:
                  type: string
                  example: Reeact Session
            example:
              daysOfWeek: 1,3,5
              endDate: '2024-02-31'
              startDate: '2024-02-19'
              title: Reeact Session
      responses:
        '200':
          description: ''
  /api/class-schedule/1:
    put:
      tags:
        - Class Schedule
      summary: Update Class Schedule
      description: Update Class Schedule
      operationId: updateClassSchedule
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                daysOfWeek:
                  type: string
                  example: '1'
                endDate:
                  type: string
                  example: '2024-04-15T22:30:00'
                startDate:
                  type: string
                  example: '2024-02-19T19:30:00'
                title:
                  type: string
                  example: Bootcamp
            example:
              daysOfWeek: '1'
              endDate: '2024-04-15T22:30:00'
              startDate: '2024-02-19T19:30:00'
              title: Bootcamp
      responses:
        '200':
          description: ''
  /api/class-schedule/1/class/1:
    post:
      tags:
        - Class Schedule
      summary: Set Class Schedule to Class and Create Attendance for Class Students
      description: Set Class Schedule to Class and Create Attendance for Class Students
      operationId: setClassScheduleToClassAndCreateAttendanceForClassStudents
      requestBody:
        content:
          text/plain:
            example: ''
      responses:
        '200':
          description: ''
  /api/file/upload:
    post:
      tags:
        - File Handling
      summary: Upload File
      description: Upload File
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                classIds:
                  type: string
                  example: '1'
                file:
                  type: string
                  format: binary
                isPublic:
                  type: string
                  example: 'true'
      responses:
        '200':
          description: ''
  /api/file/download/file-94e96fff-ee46-4706-bd12-be9bdc77eb4e.png:
    get:
      tags:
        - File Handling
      summary: Download File
      description: Download File
      operationId: downloadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: ''
  /api/report/attendance-report/1:
    get:
      tags:
        - Report
      summary: Create Class Attendance Report
      description: Create Class Attendance Report
      operationId: createClassAttendanceReport
      responses:
        '200':
          description: ''
  /api/report/grades-report/assignment/{assignmentId}:
    get:
      tags:
        - Report
      summary: Create Assignment Grades Report
      description: Create Assignment Grades Report
      operationId: createAssignmentGradesReport
      responses:
        '200':
          description: ''
    parameters:
      - name: assignmentId
        in: path
        required: true
        schema:
          type: string
          example: '1'
tags:
  - name: Auth
  - name: User
  - name: Class
  - name: Teacher
  - name: Student
  - name: Assignment
  - name: Class Schedule
  - name: File Handling
  - name: Report
